// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/service/product_category.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "kenykendf/digital-kiosk/internal/app/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductCategoryRepo is a mock of ProductCategoryRepo interface.
type MockProductCategoryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProductCategoryRepoMockRecorder
}

// MockProductCategoryRepoMockRecorder is the mock recorder for MockProductCategoryRepo.
type MockProductCategoryRepoMockRecorder struct {
	mock *MockProductCategoryRepo
}

// NewMockProductCategoryRepo creates a new mock instance.
func NewMockProductCategoryRepo(ctrl *gomock.Controller) *MockProductCategoryRepo {
	mock := &MockProductCategoryRepo{ctrl: ctrl}
	mock.recorder = &MockProductCategoryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductCategoryRepo) EXPECT() *MockProductCategoryRepoMockRecorder {
	return m.recorder
}

// CreateProductCategory mocks base method.
func (m *MockProductCategoryRepo) CreateProductCategory(params *model.ProductCategories) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductCategory", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProductCategory indicates an expected call of CreateProductCategory.
func (mr *MockProductCategoryRepoMockRecorder) CreateProductCategory(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductCategory", reflect.TypeOf((*MockProductCategoryRepo)(nil).CreateProductCategory), params)
}

// DeleteProductCategory mocks base method.
func (m *MockProductCategoryRepo) DeleteProductCategory(ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductCategory", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductCategory indicates an expected call of DeleteProductCategory.
func (mr *MockProductCategoryRepoMockRecorder) DeleteProductCategory(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductCategory", reflect.TypeOf((*MockProductCategoryRepo)(nil).DeleteProductCategory), ID)
}

// GetProductCategoriesLists mocks base method.
func (m *MockProductCategoryRepo) GetProductCategoriesLists() ([]model.ProductCategories, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductCategoriesLists")
	ret0, _ := ret[0].([]model.ProductCategories)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductCategoriesLists indicates an expected call of GetProductCategoriesLists.
func (mr *MockProductCategoryRepoMockRecorder) GetProductCategoriesLists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductCategoriesLists", reflect.TypeOf((*MockProductCategoryRepo)(nil).GetProductCategoriesLists))
}

// GetProductCategoryByID mocks base method.
func (m *MockProductCategoryRepo) GetProductCategoryByID(ID string) (model.ProductCategories, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductCategoryByID", ID)
	ret0, _ := ret[0].(model.ProductCategories)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductCategoryByID indicates an expected call of GetProductCategoryByID.
func (mr *MockProductCategoryRepoMockRecorder) GetProductCategoryByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductCategoryByID", reflect.TypeOf((*MockProductCategoryRepo)(nil).GetProductCategoryByID), ID)
}

// UpdateProductCategory mocks base method.
func (m *MockProductCategoryRepo) UpdateProductCategory(ID string, params model.ProductCategories) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductCategory", ID, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductCategory indicates an expected call of UpdateProductCategory.
func (mr *MockProductCategoryRepoMockRecorder) UpdateProductCategory(ID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductCategory", reflect.TypeOf((*MockProductCategoryRepo)(nil).UpdateProductCategory), ID, params)
}
